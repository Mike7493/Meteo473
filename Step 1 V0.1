#!/usr/bin/env python
####################################################################################################
# ?????
#
# Authors: Austin Jordan, Brian Mastro, Michael Spagnolo, & Paige Wagner
# Emails: amj5454@psu.edu | btm5158@psu.edu | Spagz@psu.edu | paw5214@psu.edu
#
# October & November, 2015
# Milestone2a_TemperaturePersistence_JordanAustin_MastroBrian_SpagnoloMichael_WagnerPaige.py
# Milestone 2 | Step 1
####################################################################################################

#---------------------------------------------------------------------------------------------------
# Set up the workspace for use!
#---------------------------------------------------------------------------------------------------

import sys
import numpy as np
import netCDF4
import os
import matplotlib.pyplot as plt

#---------------------------------------------------------------------------------------------------
# Using the command line arguments, check to make sure the inputs were valid for this program.
# This script supports an extra argument, the file path. This checks to make sure the user has
# imputted the right information. This program only supports NetCDF files. Respective error
# messages will be outputted based on what the user did incorrectly.
#---------------------------------------------------------------------------------------------------

# Checks to see if there is only one extra argument. Program quits if requirments not met.

if len(sys.argv) > 2:

    print 'You have entered too many arguments. Please only enter one, the file location/name.'

    quit()

elif len(sys.argv) < 2:

    print 'You have not entered enough arguments. Please try again, with the file location/name.'

    quit()

# Checks to see if the file is a NetCDF file and is it exists. Program quits otherwise.

else:

    # Extracts the name/location of the file from the system argument inputted.

    ncfile = sys.argv[1]

    if os.path.exists(ncfile):

        if ncfile.endswith('.nc'):

            # If the file is good, the program moves on.

            print 'You have entered a valid file. Thank you!'

        else:

            print 'This file type is invalid. Please enter a netCDF file only.'

            quit()

    else:

        print 'This file name and/or location does not exist. Please try again.'

        quit()

#---------------------------------------------------------------------------------------------------
# Variables are read from the user file.
#---------------------------------------------------------------------------------------------------

ncfiledata = netCDF4.Dataset(ncfile, 'r')

# In this case, set variables are extracted.

time = ncfiledata.variables['time'][:]
latitude = ncfiledata.variables['latitude'][:]
longitude = ncfiledata.variables['longitude'][:]

# Time needs to be sorted accordingly, data from one day is split into 2 different locations.

time_sorted = np.zeros(len(time))
time_sorted = time[np.argsort(time)]

# Observations in the file are taken every 3 hours. Thus, the tau is divided by 3 to ensure we are
# at the correct times. Thus 24 hours ahead is 8 lines ahead in the time file.

t = 0
tau = [0, 8, 16, 56, 112, 240]

# To prevent memory issues, not all of the temp data will be loaded in at once. Calculations will be
# completed for individual latitudes and longitudes in a loop.

#---------------------------------------------------------------------------------------------------
# Calculate the autocorrelation between temperatures at each location for variaous taus.
#---------------------------------------------------------------------------------------------------

corr = np.zeros((len(tau), len(latitude), len(longitude)))

for i in range(len(latitude)):
    for j in range(len(longitude)):
        temp = ncfiledata.variables['t2m'][:][i][j]
        for k in range(len(tau)):
            t = tau[k]
            temp2calcA = np.zeros((len(temp)-t))
            temp2calcB = np.zeros((len(temp)-t))
            temp2calcA[:] = temp[0:len(temp)-t]
            temp2calcB[:] = temp[t:len(temp)]
            corr[k,i,j] = np.corrcoef(temp2calcA, temp2calcB)[0,1]

#---------------------------------------------------------------------------------------------------
# Plot this data to an image. One image for each correlation calculated per tau.
#---------------------------------------------------------------------------------------------------



####################################################################################################
# DONE with Python script for MileStone 2 Step 1! :*)
####################################################################################################
